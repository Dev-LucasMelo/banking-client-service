// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id            String   @id @default(uuid()) @db.Uuid
  nome_completo String   @db.VarChar(100)
  cpf           String   @db.VarChar(20)
  email         String   @unique @db.VarChar(30)
  senha         String   @db.VarChar(100)
  url_perfil    String?  @db.VarChar(100)
  criado_em     DateTime @default(now()) @map("criado_em")
  atualizado_em DateTime @updatedAt @map("atualizado_em")

  Conta      Conta?
  Endereco Endereco?
}

model Conta {
  id            String   @id @default(uuid()) @db.Uuid
  numero_conta  String   @unique @db.VarChar(20)
  agencia       String   @db.VarChar(10)
  saldo         Decimal  @db.Decimal(15, 2) @default(0) 
  tipo          String   @db.VarChar(20)
  status        String   @db.VarChar(20)
  criado_em     DateTime @default(now()) @map("criado_em")
  atualizado_em DateTime @updatedAt @map("atualizado_em")

  cliente_id String  @unique @db.Uuid
  cliente    Cliente @relation(fields: [cliente_id], references: [id])

  @@map("conta")
}

model Endereco {
  id            String   @id @default(uuid()) @db.Uuid
  numero        String   @db.VarChar(10)
  rua           String   @db.VarChar(40)
  bairro        String   @db.VarChar(30)
  cidade        String   @db.VarChar(20)
  status        String   @db.VarChar(20)
  cep           String   @db.VarChar(10)
  criado_em     DateTime @default(now())
  atualizado_em DateTime @updatedAt

  cliente_id String  @unique @db.Uuid
  cliente    Cliente @relation(fields: [cliente_id], references: [id])

  @@map("endereco")
}
